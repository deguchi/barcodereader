{"id":"index.html","dependencies":[{"name":"_css_loader","parent":"Z:\\barcodereader\\index.html","resolved":"Z:\\barcodereader\\node_modules\\parcel-bundler\\src\\builtins\\css-loader.js"},{"name":"Z:\\barcodereader\\package.json","includedInParent":true,"mtime":1549586643860}],"generated":{"html":"\r\n<!DOCTYPE html>\r\n<html lang=\"ja\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=640, initial-scale=1.0,user-scalable=no\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>バーコードリーダーサンプル</title>\r\n    <style>html, body {\r\n            padding: 0;\r\n            margin: 0;\r\n            background: #000000;\r\n        }\r\n        #camera canvas {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n        }\r\n        #cover {\r\n            display: none;\r\n        }</style>\r\n</head>\r\n<body>\r\n    <div id=\"camera\"></div>\r\n    <script src=\"https://serratus.github.io/quaggaJS/examples/js/quagga.min.js\" type=\"text/javascript\"></script>\r\n    <script>Quagga.init({\n  numOfWorkers: 4,\n  frequency: 10,\n  locate: true,\n  inputStream: {\n    name: \"Live\",\n    type: \"LiveStream\",\n    target: document.querySelector('#camera'),\n    constraints: {\n      width: {\n        min: 640,\n        ideal: window.innerWidth,\n        max: 1920\n      },\n      height: {\n        min: 480,\n        ideal: window.innerHeight,\n        max: 1080\n      },\n      facingMode: \"environment\",\n      // or user\n      frameRate: 10\n    }\n  },\n  decoder: {\n    readers: ['ean_reader']\n  },\n  locator: {\n    patchSize: \"medium\" // x-small, small, medium, large, x-large\n\n  }\n}, function (err) {\n  if (err) {\n    console.log(err);\n    return;\n  }\n\n  console.log(\"Initialization finished. Ready to start\");\n  Quagga.start();\n});\nQuagga.onProcessed(function (result) {\n  var drawingCtx = Quagga.canvas.ctx.overlay,\n      drawingCanvas = Quagga.canvas.dom.overlay;\n\n  if (result) {\n    if (result.boxes) {\n      drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n      result.boxes.filter(function (box) {\n        return box !== result.box;\n      }).forEach(function (box) {\n        Quagga.ImageDebug.drawPath(box, {\n          x: 0,\n          y: 1\n        }, drawingCtx, {\n          color: \"green\",\n          lineWidth: 2\n        });\n      });\n    }\n\n    if (result.box) {\n      Quagga.ImageDebug.drawPath(result.box, {\n        x: 0,\n        y: 1\n      }, drawingCtx, {\n        color: \"#00F\",\n        lineWidth: 2\n      });\n    }\n\n    if (result.codeResult && result.codeResult.code) {\n      Quagga.ImageDebug.drawPath(result.line, {\n        x: 'x',\n        y: 'y'\n      }, drawingCtx, {\n        color: 'red',\n        lineWidth: 3\n      });\n    }\n  }\n});\n\nfunction isbn13to10(isbn13) {\n  isbn13 += \"\";\n  var digits = [];\n  digits = isbn13.substr(3, 9).split(\"\");\n  var sum = 0;\n  var chk_tmp, chk_digit;\n\n  for (var i = 0; i < 9; i++) {\n    sum += digits[i] * (10 - i);\n  }\n\n  chk_tmp = 11 - sum % 11;\n\n  if (chk_tmp == 10) {\n    chk_digit = 'X';\n  } else if (chk_tmp == 11) {\n    chk_digit = 0;\n  } else {\n    chk_digit = chk_tmp;\n  }\n\n  digits.push(chk_digit);\n  return digits.join(\"\");\n}\n\nvar isMatched = false;\nvar params = getQueryString();\nQuagga.onDetected(function (result) {\n  var barcode = result.codeResult.code;\n\n  if (!isMatched && !barcode.match(/^19/)) {\n    isMatched = true;\n    console.log(params);\n\n    if (params) {\n      if (params.isbn === '10' && barcode.match(/^97[8|9]/)) {\n        barcode = isbn13to10(barcode);\n      }\n\n      setTimeout(function () {\n        location.href = params.url.replace('{{barcode}}', barcode);\n      }, 300);\n    } else {\n      alert(barcode);\n    }\n  }\n});\n\nfunction getQueryString() {\n  if (location.search === '') return null;\n  var params = {};\n  location.search.substr(1).split('&').map(function (param) {\n    var pairs = param.split('=');\n    params[pairs[0]] = decodeURIComponent(pairs[1]);\n  });\n  return params;\n}</script>\r\n</body>\r\n</html>"},"hash":"63f1a3c92d62ca6fce711b0084f3df8c","cacheData":{"env":{}}}